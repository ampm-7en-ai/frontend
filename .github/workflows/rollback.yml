name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - beta
          - production
      backup_timestamp:
        description: 'Backup timestamp to restore (format: YYYY-MM-DD-HH-MM-SS). Leave empty to list available backups.'
        required: false
        type: string

jobs:
  list-backups:
    name: List Available Backups
    runs-on: ubuntu-latest
    if: inputs.backup_timestamp == ''
    environment: ${{ inputs.environment }}
    steps:
      - name: List backups on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[format('{0}_HOST', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          username: ${{ secrets[format('{0}_USER', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          key: ${{ secrets[format('{0}_SSH_KEY', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          port: ${{ secrets[format('{0}_PORT', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] || 22 }}
          script: |
            echo "📋 Available backups for ${{ inputs.environment }}:"
            echo ""
            
            ENV_PREFIX="${{ inputs.environment == 'production' && 'production' || inputs.environment }}"
            cd /var/www/backups
            
            # List last 10 backups with details
            ls -lt | grep "^d" | grep "^${ENV_PREFIX}-" | head -n 10 | while read -r line; do
              dir_name=$(echo "$line" | awk '{print $NF}')
              timestamp=$(echo "$dir_name" | sed "s/${ENV_PREFIX}-//")
              size=$(du -sh "$dir_name" | awk '{print $1}')
              echo "- $timestamp (Size: $size)"
            done
            
            echo ""
            echo "To rollback, re-run this workflow and provide a backup timestamp from the list above."

      - name: Create summary
        run: |
          echo "## 📋 Available Backups for ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the SSH action logs above for the list of available backups." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To rollback to a specific backup:" >> $GITHUB_STEP_SUMMARY
          echo "1. Copy the timestamp from the list above" >> $GITHUB_STEP_SUMMARY
          echo "2. Re-run this workflow" >> $GITHUB_STEP_SUMMARY
          echo "3. Paste the timestamp in the 'backup_timestamp' field" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback to Previous Version
    runs-on: ubuntu-latest
    if: inputs.backup_timestamp != ''
    environment: ${{ inputs.environment }}
    steps:
      - name: Validate backup timestamp format
        run: |
          timestamp="${{ inputs.backup_timestamp }}"
          if ! [[ "$timestamp" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}$ ]]; then
            echo "❌ Invalid timestamp format. Expected: YYYY-MM-DD-HH-MM-SS"
            echo "Example: 2025-10-12-14-30-00"
            exit 1
          fi
          echo "✅ Timestamp format valid"

      - name: Create pre-rollback backup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[format('{0}_HOST', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          username: ${{ secrets[format('{0}_USER', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          key: ${{ secrets[format('{0}_SSH_KEY', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          port: ${{ secrets[format('{0}_PORT', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] || 22 }}
          script: |
            echo "Creating pre-rollback backup..."
            
            ENV_PREFIX="${{ inputs.environment == 'production' && 'production' || inputs.environment }}"
            DOMAIN="${{ inputs.environment == 'production' && '7en.ai' || format('{0}.7en.ai', inputs.environment) }}"
            TIMESTAMP=$(date +'%Y-%m-%d-%H-%M-%S')
            
            mkdir -p /var/www/backups
            if [ -d "/var/www/${DOMAIN}" ] && [ "$(ls -A /var/www/${DOMAIN})" ]; then
              sudo cp -r /var/www/${DOMAIN} /var/www/backups/${ENV_PREFIX}-pre-rollback-${TIMESTAMP}
              echo "✅ Pre-rollback backup created: ${ENV_PREFIX}-pre-rollback-${TIMESTAMP}"
            fi

      - name: Perform rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[format('{0}_HOST', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          username: ${{ secrets[format('{0}_USER', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          key: ${{ secrets[format('{0}_SSH_KEY', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          port: ${{ secrets[format('{0}_PORT', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] || 22 }}
          script: |
            set -e
            
            ENV_PREFIX="${{ inputs.environment == 'production' && 'production' || inputs.environment }}"
            DOMAIN="${{ inputs.environment == 'production' && '7en.ai' || format('{0}.7en.ai', inputs.environment) }}"
            BACKUP_PATH="/var/www/backups/${ENV_PREFIX}-${{ inputs.backup_timestamp }}"
            
            echo "🔄 Starting rollback process..."
            echo "Environment: ${{ inputs.environment }}"
            echo "Backup: ${BACKUP_PATH}"
            
            # Verify backup exists
            if [ ! -d "${BACKUP_PATH}" ]; then
              echo "❌ Backup not found: ${BACKUP_PATH}"
              echo "Available backups:"
              ls -lt /var/www/backups | grep "^d" | grep "${ENV_PREFIX}-"
              exit 1
            fi
            
            # Verify backup has content
            if [ ! -f "${BACKUP_PATH}/index.html" ]; then
              echo "❌ Invalid backup - index.html not found"
              exit 1
            fi
            
            echo "✅ Backup verified"
            
            # Stop services temporarily (optional)
            # sudo systemctl stop nginx
            
            # Clear current deployment
            echo "Clearing current deployment..."
            sudo rm -rf /var/www/${DOMAIN}/*
            
            # Restore from backup
            echo "Restoring from backup..."
            sudo cp -r ${BACKUP_PATH}/* /var/www/${DOMAIN}/
            
            # Set proper permissions
            sudo chown -R $USER:$USER /var/www/${DOMAIN}
            
            # Verify restoration
            if [ ! -f "/var/www/${DOMAIN}/index.html" ]; then
              echo "❌ Rollback failed - index.html not found after restore"
              exit 1
            fi
            
            echo "✅ Files restored successfully"

      - name: Reload nginx and verify
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[format('{0}_HOST', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          username: ${{ secrets[format('{0}_USER', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          key: ${{ secrets[format('{0}_SSH_KEY', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] }}
          port: ${{ secrets[format('{0}_PORT', inputs.environment == 'production' && 'PROD' || upper(inputs.environment))] || 22 }}
          script: |
            echo "Reloading nginx..."
            sudo systemctl reload nginx
            
            if [ $? -eq 0 ]; then
              echo "✅ Nginx reloaded successfully"
            else
              echo "❌ Nginx reload failed"
              exit 1
            fi

      - name: Run health check
        run: |
          echo "Running health check..."
          sleep 5
          
          URL="https://${{ inputs.environment == 'production' && '7en.ai' || format('{0}.7en.ai', inputs.environment) }}"
          
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt of $max_attempts..."
            status_code=$(curl -s -o /dev/null -w "%{http_code}" "${URL}")
            
            if [ "$status_code" -eq 200 ]; then
              echo "✅ Health check passed!"
              exit 0
            fi
            
            echo "Status code: $status_code (expected 200)"
            attempt=$((attempt + 1))
            sleep 3
          done
          
          echo "❌ Health check failed after $max_attempts attempts"
          exit 1

      - name: Create rollback summary
        if: success()
        run: |
          echo "## 🔄 Rollback Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Restored backup**: ${{ inputs.backup_timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://${{ inputs.environment == 'production' && '7en.ai' || format('{0}.7en.ai', inputs.environment) }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rolled back by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Verification" >> $GITHUB_STEP_SUMMARY
          echo "- Files restored: Yes" >> $GITHUB_STEP_SUMMARY
          echo "- Nginx reloaded: Yes" >> $GITHUB_STEP_SUMMARY
          echo "- Health check: Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the application is working correctly" >> $GITHUB_STEP_SUMMARY
          echo "2. Investigate the root cause of the issue that required rollback" >> $GITHUB_STEP_SUMMARY
          echo "3. Fix the issue before attempting to redeploy" >> $GITHUB_STEP_SUMMARY

      - name: Notify rollback failure
        if: failure()
        run: |
          echo "## ❌ Rollback Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Attempted backup**: ${{ inputs.backup_timestamp }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Manual Intervention Required" >> $GITHUB_STEP_SUMMARY
          echo "1. SSH to the server immediately" >> $GITHUB_STEP_SUMMARY
          echo "2. Run the emergency rollback script" >> $GITHUB_STEP_SUMMARY
          echo "3. Check nginx logs: \`sudo tail -f /var/log/nginx/error.log\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Contact DevOps team for assistance" >> $GITHUB_STEP_SUMMARY
